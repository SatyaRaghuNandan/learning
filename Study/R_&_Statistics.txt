Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-19T12:21:29-07:00

====== R coding ======
Created Sunday 19 March 2017

R is an object-oriented, functional 

**Misc:**
	t(matrix)
	
	aggregate(x, by, FUN)
	
	reshape2: melt, dcastaq
	
	for functions 
		you can have Default Arguments
		 you don't need to write "return", just write the name of the variable to be returned
     
	Remember to backup your dataset frequently:
		df_backup <- df
	
	When filter/impute by a column's mean/median, save the value into a new variable first, because after the update the mean/median will change
	
	To remove a column:
		df$col <- NULL
	
	Rearrange the columns of a dataframe:
		util <- util[, c(4, 1, 2, 3)]

**Data Types**
	Atomic Vectors
		elements are of same data type
	Generic Vector (or Lists)
		Lists with dim attribute:
			1-D vecor, matrix, array
	
**EDA**
	dataframe <- read.csv("xxx.csv")
	 load("xxx.rda")
	tail(dataframe, 4)
	str(dataframe): check structure of dataset
	summary(dataframe)
	stat.desc(dataframe)
	describe()
	describeBy()
	aggregate(data, by = list, FUN)
	
	typeof(variable): integer, double, character...
	class(variable): numeric, character, factor
	
	Visualizing Results: packages vcd, ca
	
	pairs(Auto) # Produce scatterplots for a subset of the variables
	pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto) 
	
	identify(Auto$horsepower,Auto$mpg,name)
	
	contour(x,y,f,nlevels=45, add=T)
	
	3-D plots:
	image(x,y,fa)
	persp(x,y,fa)
	persp(x,y,fa,theta=30)
	persp(x,y,fa,theta=30,phi=20)
	
**Factors**
	a categorical variable in R (non-Numerical variable)
	R assigns an Identifier (an integer) to each Category, called "Level" or "Factorization Integer"; R deals with Factors in Numerical Sense!
	
	Factor Variable Trap (FVT)
		when you convert a column from Factor to Non-Factor
		the "Factorization Integer", not the factor value, will be returned if using **as.numeric(factor variable)**
		correct way: Factor → Character → Numeric: **as.numeric( as.character (factor variable ) )**

**Table**
	table is like a matrix
	with(df, table(col) )
	Two-way tables: xtabs(~ colA + colB, data = df )
	margin.table( tableA ), margin.table(A, 1), margin(A, 2)
	prop.table( A ), prop.table (A, 1), prop.table(A, 2)
	addmargins ( mytable ), addmargins( prop.table(mytable) )
	addmargins (prop.table(A, 1), 2)

**Measures of Association**
	VCD package (visualizing **Categorical** Data)
	assocstats( ), kappa()

**Test of Independence (for Discrete Data)**
	Chi-square test: check the H0 of independece of row and column variables
	Fish Exact test: check the H0 of independence of rows and columns in a two-way table
	Cochran-Mantel-Haenszel test

**Measures of Correlation (for Continuous Data)**
	Covariance-Matrix: cov(colA, colB)
	Correlation: cor(x, use = , method = ): Pearson, Spearman, Kendall correlations
	 Partial Correlation: pcor(u, S)

**Testing correlations for significance**
	cor.test(x, y, alternative = , method = )
		alternative: two.side, less, greater
		method: pearson, kendall, spearman
	pcor.test(r, q, n)
	r.test()

**T-tests:**
	Independent: by default assume unequal variance, two-sided
		t.test(Res ~ Group, data = UScrime, var.equal = TRUE)
	Dependent: Assumes the difference between groups is normally distr
		with (data, t.test(col1, col2, paired = TRUE)
	More than two groups:
		ANOVA
	If parametric assumptions for T-test and ANOVA are not met:
		wilcox.test, Jruskal-Wallis test, Friedman test


**Apply Functions Family:**
	**apply**: matrix
	tapply: vector
	by: data frames
	eapply: to Environment
	**lapply**: to elements in a List
	**sapply**: a version of lapply
	vapply: pre-specified return value type
	replicate: random variables
	mapply: multivariate version of sapply
	rapply: recursive version of lapply
	
**Sub & GSUB functions**
	find and replace: sub - first match; gsub - all matches
	to replace a $: add an **Escape Sequence**: "\\$"
	GSUB can also be applied directly on Factor variable, it will automatically do Factor -> Char conversion
		e.g. 
		fin$Expenses <- gsub(",", "", fin$Expenses)
		fin$Revenue <-gsub("\\$", "", fin$Revenue)
	
**Missing Data (NA)**
	How to handel?
	1. predict missing data with 100% accuracy
	2. leave the record as it is
	3. remove the row
	4. fill with Mean or Median (**Median is preferred as it's less affected by outliers**)
	5. fill by exploring correlations and similarities
	6. introduce dummy variable for "Missingness"

	**NA** (missing value)
		It's the third Logical Constant (like TRUE and FALSE)
		"NA == TRUE" : NA
		"NA == NA" : NA
		"5 == NA": NA
		If a Factor column has missing value: <NA>    (R is helping us by adding <>)
		Otherwise: NA
	
	**How to locate them?**
		complete.cases(df) : returnes whether each row is "complete"
		df[ !complete.cases(df), ]
		
		sum(is.na(df$col)) — number of rows with missing values in a column
		
		What if there are "Blanks"? they are not "NA".... Do the trick when importing data: 
			read.csv( "filename.csv", na.strings = c("", "  ", "New York") )
	
	**Filtering**
		**using which() for non-missing data**
			which(condition expression) will only return the rows with TRUE value
			(condition experssion) will bring back rows with TRUE and NA values
		**using is.na() for missing data**
			is.na(colname)
	
	**Reseting dataframe index (in R, index numbers don't auto-reset like in Excel)**
		rownames(fin) <- NULL

**Date-Time**
	which format? American or European?
		Convert it to POSIXct  (calender time), the Unix time format!
			as.POSIXct(df%col, format = "%d%m%Y %H:%M" )

**List**
	set names of components:
		name(listA) <- c("X", "Y", "Z")
	
	two ways to extract components of a list:
		: returns the actual object (**size depends on the object content**),  is for accessing a **Single** **Component** of a list
		$: returns the actual object, prettier format 
		
	numeration shifting
		when removing components, the "index" of the remaining components automatically shifts, unlike [[DataFrame]]
	
	subsetting:
		[]: returns a list
			listName[1]
			listName[ c(1, 3, 4)]
			listName[ c("A", "C", "D") ]

**Plotting**
	# scatter plot
	p <- ggplot(data = fin)
	p + geom_point(aes(x=Revenue, y=Expenses, 
					   colour=Industry, size=Profit))
	
	# scatter plot with industry trends
	d <- ggplot(data = fin, aes(x=Revenue, y=Expenses,
								colour = Industry))
	d + geom_point() + 
		geom_smooth(fill=NA, size=1)
	
	# Boxplot for Growth per Industry
	f <- ggplot(data = fin, aes(x=Industry, y=Growth,
								colour = Industry))
	f + geom_jitter() +
	  geom_boxplot(size = 1, alpha = 0.5, outlier.color = NA)
	

**Resources:**
	MLR tutorial: https://www.analyticsvidhya.com/blog/2016/08/practicing-machine-learning-techniques-in-r-with-mlr-package/
	MLR doc: https://mlr-org.github.io/mlr-tutorial/release/html/create_filter/index.html
	Mengying Li: https://github.com/MengyingLi/RScripts
	KNN in R: https://rpubs.com/njvijay/16444

	
**Misc Snippets:**
bmi$greaterequal65 = ifelse(bmi$age>=65,1,0)

table(d$elderly,d$male,dnn=c("Elderly","Male"))

na.rm = T  (removes the null values)

with(dataframe, tapply ( column1, column2, function) )

attach(dataframe), then work on its columns

dataframe$column1[which (dataframe$column2%in%value)]
	e.g. hist(data$fev[which(data$smoke%in%0)],main="Histogram of FEV in Non-Smokers",xlab="FEV in L")

data.frame(output1 = formula1, output2 = formula2, output3 = formula3, ...)
	e.g. data.frame(phat[1],phat[2],z,p=2*(1-pnorm(abs(z))))

Dot Plot:
	plot(as.numeric(d$Method),r,axes=F,xlab="Method",ylab="Residual")
	axis(side=2)  ## y-axis
	axis(side=1,at=1:4,labels=c("A","B","C","C"))  ##  x-axis

Exit Rstudio:
	If we want to save all of the variables that are currently in the workspace, we can do that with
	save.image() or, alternatively, we can do it when prompted when we exit RStudio. If we want to
	save a history of the commands used in the session, we can use savehistory(). Later we can load
	them using loadhistory().
