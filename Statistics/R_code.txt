Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-01-18T17:39:26+00:00

====== R code ======
Created Wednesday 18 January 2017


R is an object-oriented, functional 
Misc:
	t(matrix), aggregate(x, by, FUN)
	reshape2: melt, dcastaq
	
**Data Types**
	Atomic Vectors
		elements are of same data type
	Generic Vector (or Lists)
		Lists with dim attribute:
			1-D vecor, matrix, array
	
**EDA**
	dataframe <- read.csv("xxx.csv")
	
	tail(dataframe, 4)
	str(dataframe): check structure of dataset
	summary(dataframe)
	stat.desc(dataframe)
	describe()
	describeBy()
	aggregate(data, by = list, FUN)
	
	typeof(variable): integer, double, character...
	class(variable): numeric, character, factor
	
**Factors**
	a categorical variable in R (non-Numerical variable)
	R assigns an Identifier (an integer) to each Category, called "Level" or "Factorization Integer"; R deals with Factors in Numerical Sense!
	
	Factor Variable Trap (FVT)
		when you convert a column from Factor to Non-Factor
		the "Factorization Integer", not the factor value, will be returned if using **as.numeric(factor variable)**
		correct way: Factor → Character → Numeric: **as.numeric( as.character (factor variable ) )**

**Test of Independence**
	Chi-square test: check the H0 of independece of row and column variables
	Fish Exact test: check the H0 of independence of rows and columns in a two-way table
	Cochran-Mantel-Haenszel test
	
**Measures of Association**
	VCD package (visualizing **Categorical** Data)
	assocstats( ), kappa()

**Measures of Correlation (for quantitative variables)**
	Pearson, Spearman, Kendall: cor(x, use = , method = ), cor.test(A, B)
	Partial: pcor( ), pcor.test(); Others

**T-tests:**
	Independent: by default assume unequal variance, two-sided
		t.test(Res ~ Group, data = UScrime, var.equal = TRUE)
	Dependent: Assumes the difference between groups is normally distr
		with (data, t.test(col1, col2, paired = TRUE)

**Apply Functions Family:**
	**apply**: matrix
	tapply: vector
	by: data frames
	eapply: to Environment
	**lapply**: to elements in a List
	**sapply**: a version of lapply
	vapply: pre-specified return value type
	replicate: random variables
	mapply: multivariate version of sapply
	rapply: recursive version of lapply
	
Sub & GSUB functions
	find and replace: sub - first match; gsub - all matches
	to replace a $: add an **Escape Sequence**: "\\$"
	GSUB can also be applied directly on Factor variable, it will automatically do Factor -> Char conversion
	
Missing Data
	How to handel?
	1. predict missing data with 100% accuracy
	2. leave the record as it is
	3. remove the row
	4. fill with Mean or Median (Median is preferred as it's less affected by outliers)
	5. fill by exploring correlations and similarities
	6. introduce dummy variable for "Missingness"

	NA (missing value)
		It's a Logical Constant (like TRUE and FALSE)
		"NA == TRUE" : NA
		"NA == NA" : NA
		If a Factor column has missing value: <NA>    (R is helping us by adding <>)
		Otherwise: NA
	
	How to locate them?
		complete.cases(df) : returnes whether each row is "complete"
		df[ !complete.cases(df), ]
		
		What if there are "Blanks"? they are not "NA".... Do the trick when importing data: 
			read.csv( "filename.csv", na.strings = c("", "  ", "New York") )








	
**Misc Snippets:**
bmi$greaterequal65 = ifelse(bmi$age>=65,1,0)

table(d$elderly,d$male,dnn=c("Elderly","Male"))

na.rm = T  (removes the null values)

with(dataframe, tapply ( column1, column2, function) )

attach(dataframe), then work on its columns

dataframe$column1[which (dataframe$column2%in%value)]
	e.g. hist(data$fev[which(data$smoke%in%0)],main="Histogram of FEV in Non-Smokers",xlab="FEV in L")

data.frame(output1 = formula1, output2 = formula2, output3 = formula3, ...)
	e.g. data.frame(phat[1],phat[2],z,p=2*(1-pnorm(abs(z))))

Dot Plot:
	plot(as.numeric(d$Method),r,axes=F,xlab="Method",ylab="Residual")
	axis(side=2)  ## y-axis
	axis(side=1,at=1:4,labels=c("A","B","C","C"))  ##  x-axis

