Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-12-13T00:08:11-08:00

====== Capstone CareerMuse ======
Created Tuesday 13 December 2016

word2vec:
https://github.com/danielfrg/word2vec
https://code.google.com/archive/p/word2vec/
http://nbviewer.jupyter.org/github/danielfrg/word2vec/blob/master/examples/word2vec.ipynb

**Andrew Ng on Recommender System:**
https://www.coursera.org/learn/machine-learning/lecture/2WoBV/collaborative-filtering

content-based: 
assume feature vectors are given, need to predict each user's preferences (theta)
predict user's rating for unrated movies (learn theta based on given x)
use linear regression for eath theta

collaborative filtering: (using contributions from multiple users to make better predictions for everyone else)
feature-learning
assume feature vectors not known (feature columns are given), user's preferences are given
predict user's rating for unrated movies (learn x based on given theta)

both together:
	1) randomly initialize theta → x → theta → x → theta → x → theta → x
	2) add two cost functions, solve x and theta simultaneously
		   randomly initialize theta & x, then Gradient Descent

Low Rank Matrix Factorization
	X * Theta-Transpose

Mean Normalization
	make implementation better
	
**Brain Storm:**
represent a job as a vector of skills, level, industry and year
each user may have different job vectors
clustering the jobs and take the centroid?

**Read:**
stemming: http://www.rdatamining.com/examples/text-mining
collaborative filtering: http://www.salemmarafi.com/code/collaborative-filtering-with-python/
our-of-core learning, minikmeans: http://scikit-learn.org/stable/modules/clustering.html#mini-batch-kmeans
Pyspark for ML: https://spark.apache.org/docs/0.9.0/api/pyspark/index.html
cosine similarity: http://blog.christianperone.com/2013/09/machine-learning-cosine-similarity-for-vector-space-models-part-iii/
semantic meaning using word2vec: https://www.oreilly.com/learning/capturing-semantic-meanings-using-deep-learning
Linkedin For Python: https://ozgur.github.io/python-linkedin/
Spark on DataBricks: https://databricks.com/product/getting-started-guide/machine-learning
recommendation engine: https://neo4j.com/blog/real-time-recommendation-engine-data-science/
Indeed Job recommendation algorithm: https://www.oreilly.com/ideas/algorithms-and-architecture-for-job-recommendations
Difference between DataFrame and RDD in Spark: https://stackoverflow.com/questions/31508083/difference-between-dataframe-and-rdd-in-spark


Slides:
	https://docs.google.com/presentation/d/1WVKsxtuPchFBn5foV0bCIa-f6DKy-i_-7MDue69OedU/edit#slide=id.g1ac72648e1_8_17
	






